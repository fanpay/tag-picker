
import { useState, useEffect } from 'react';
import { useCombobox, useMultipleSelection } from 'downshift';
import {
  Menu,
  ControllerButton,
  Item,
  ArrowIcon,
  getItems,
  type Tag,
  type TagNode
} from './shared';
import styled from '@emotion/styled';

// The CustomElement object is globally available.
declare global {
  interface Window {
    CustomElement: {
      init: (callback: (element: any, context: any) => void) => void;
      setValue: (value: string | null) => void;
      setHeight: (height: number) => void;
      onDisabledChanged: (callback: (disabled: boolean) => void) => void;
    };
  }
}

const AppContainer = styled.div`
  display: flex;
  flex-direction: column;
  margin-top: 50px;
`;

const ComboboxContainer = styled.div`
  width: 500px;
  margin: auto;
  position: relative;
`;

const ComboboxWrapper = styled.div`
  cursor: pointer;
  position: relative;
  border-radius: 6px;
  padding: 10px;
  padding-right: 50px;
  box-shadow: 0 2px 3px 0 rgba(34, 36, 38, 0.15);
  border-color: #96c8da;
  border-width: 1px;
  border-style: solid;
`;

const SelectedItemsWrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  align-items: center;
`;

const SelectedItem = styled.div`
  margin: 2px;
  padding: 2px 8px;
  display: inline-block;
  word-wrap: none;
  background-color: #ccc;
  border-radius: 2px;
`;

const SelectedItemGrid = styled.div`
  display: grid;
  grid-gap: 6px;
  grid-auto-flow: column;
  align-items: center;
`;

const RemoveButton = styled.button`
  cursor: pointer;
  line-height: 0.8;
  border: none;
  background-color: transparent;
  padding: 0;
  font-size: 16px;
`;

const Input = styled.input`
  border: none;
  margin-left: 6px;
  flex: 1;
  font-size: 14px;
  min-height: 27px;
`;

function App() {
  const [selectedItems, setSelectedItems] = useState<Tag[]>([]);
  const [disabled, setDisabled] = useState<boolean>(true);
  const [allTags, setAllTags] = useState<Tag[]>([]);
  const [parentTagCodename, setParentTagCodename] = useState<string | null>(
    null,
  );
  const [inputValue, setInputValue] = useState('');

  useEffect(() => {
    const initCustomElement = () => {
      if (window.CustomElement) {
        window.CustomElement.init((element, context) => {
          if (typeof element.value === 'string' && element.value) {
            let initialValue: string[] = [];
            try {
              const parsedValue = JSON.parse(element.value);
              if (Array.isArray(parsedValue)) {
                initialValue = parsedValue;
              }
            } catch (error) {
              initialValue = [element.value];
            }
            // We will set the selected items once the tags are fetched
          }

          if (element.config && element.config.parentTagCodename) {
            setParentTagCodename(element.config.parentTagCodename);
          } else {
            console.error(
              'parentTagCodename not configured in the custom element.',
            );
          }

          setDisabled(element.disabled);
          fetchTags(context.projectId, element.value);
          window.CustomElement.setHeight(
            document.documentElement.scrollHeight,
          );
        });

        window.CustomElement.onDisabledChanged(setDisabled);
      } else {
        console.error('CustomElement SDK not found.');
      }
    };

    const fetchTags = async (projectId: string, initialValue: string) => {
      try {
        const response = await fetch(
          `https://deliver.kontent.ai/${projectId}/items?system.type=_tag`,
        );
        if (!response.ok) {
          throw new Error(`Failed to fetch tags. Status: ${response.status}`);
        }
        const data = await response.json();
        let tags: Tag[] = data.items;

        if (parentTagCodename) {
          const tagMap = new Map<string, TagNode>();
          tags.forEach(tag => {
            tagMap.set(tag.system.codename, { ...tag, children: [] });
          });

          tags.forEach(tag => {
            const parentCodenames = tag.elements.parent_tag?.value || [];
            if (parentCodenames.length > 0) {
              parentCodenames.forEach(parentCodename => {
                const parentNode = tagMap.get(parentCodename);
                const currentNode = tagMap.get(tag.system.codename);
                if (parentNode && currentNode) {
                  parentNode.children.push(currentNode);
                }
              });
            }
          });

          const getDescendants = (node: TagNode): Tag[] => {
            let descendants: Tag[] = [node];
            for (const child of node.children) {
              descendants = [...descendants, ...getDescendants(child)];
            }
            return descendants;
          };

          const rootNode = tagMap.get(parentTagCodename);
          if (rootNode) {
            tags = getDescendants(rootNode);
          }
        }
      
        console.log('Fetched tags:', tags);
        setAllTags(tags);
      

        console.log('Initial value:', initialValue);
        if (initialValue) {
            let initialCodenames: string[] = [];
            try {
                const parsedValue = JSON.parse(initialValue);
                if (Array.isArray(parsedValue)) {
                    initialCodenames = parsedValue;
                }
            } catch (error) {
                initialCodenames = [initialValue];
            }
            const initialSelectedItems = tags.filter(tag => initialCodenames.includes(tag.system.codename));
            console.log('Initial selected items:', initialSelectedItems);
            setSelectedItems(initialSelectedItems);
        }

      } catch (error) {
        console.error('Error fetching tags:', error);
      }
    };

    initCustomElement();
  }, [parentTagCodename]);

  useEffect(() => {
    if (window.CustomElement) {
      window.CustomElement.setHeight(document.documentElement.scrollHeight);
    }
  }, [selectedItems]);

  useEffect(() => {
    if (window.CustomElement) {
      const codenames = selectedItems.map(item => item.system.codename);
      window.CustomElement.setValue(JSON.stringify(codenames));
    }
  }, [selectedItems]);

  const {
    getSelectedItemProps,
    getDropdownProps,
    addSelectedItem,
    removeSelectedItem,
  } = useMultipleSelection({
    selectedItems,
    onStateChange({ selectedItems: newSelectedItems, type }) {
      switch (type) {
        case useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace:
        case useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete:
        case useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace:
        case useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem:
          setSelectedItems(newSelectedItems || []);
          break;
        default:
          break;
      }
    },
  });

  const getFilteredItems = () => {
    return allTags.filter(
      (item) =>
        !selectedItems.find((i) => i.system.id === item.system.id) &&
        item.system.name.toLowerCase().includes(inputValue.toLowerCase()),
    );
  }

  const {
    isOpen,
    getToggleButtonProps,
    getLabelProps,
    getMenuProps,
    getInputProps,
    highlightedIndex,
    getItemProps,
  } = useCombobox({
    items: getFilteredItems(),
    itemToString: item => (item ? item.system.name : ''),
    selectedItem: null,
    inputValue,
    onStateChange: ({ inputValue: newInputValue, type, selectedItem }) => {
      switch (type) {
        case useCombobox.stateChangeTypes.InputChange:
          setInputValue(newInputValue || '');
          break;
        case useCombobox.stateChangeTypes.InputKeyDownEnter:
        case useCombobox.stateChangeTypes.ItemClick:
        case useCombobox.stateChangeTypes.InputBlur:
          if (selectedItem) {
            setInputValue('');
            addSelectedItem(selectedItem);
            setSelectedItems([...selectedItems, selectedItem]);
          }
          break;
        default:
          break;
      }
    },
  });

  return (
    <AppContainer>
      <h1 style={{ textAlign: 'center' }}>Multi-selection example</h1>
      <ComboboxContainer>
        <label {...getLabelProps()}>Select Tag(s)</label>
        <ComboboxWrapper {...getDropdownProps()}>
          <SelectedItemsWrapper>
            {selectedItems.length > 0
              ? selectedItems.map((selectedItem, index) => (
                  <SelectedItem
                    key={`selected-item-${index}`}
                    {...getSelectedItemProps({ selectedItem, index })}
                  >
                    <SelectedItemGrid>
                      <span>{selectedItem.system.name}</span>
                      <RemoveButton
                        onClick={(e) => {
                          e.stopPropagation();
                          removeSelectedItem(selectedItem);
                        }}
                        disabled={disabled}
                      >
                        ùòÖ
                      </RemoveButton>
                    </SelectedItemGrid>
                  </SelectedItem>
                ))
              : 'Select a value'}
            <Input
              {...getInputProps(
                getDropdownProps({
                  preventKeyAction: isOpen,
                  disabled,
                  onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => {
                    if (event.key === 'Backspace' && !inputValue) {
                      removeSelectedItem(selectedItems[selectedItems.length - 1]);
                    }
                  },
                }),
              )}
            />
          </SelectedItemsWrapper>
          <ControllerButton {...getToggleButtonProps()} disabled={disabled}>
            <ArrowIcon isOpen={isOpen} />
          </ControllerButton>
        </ComboboxWrapper>
        <Menu {...getMenuProps()}>
          {isOpen &&
            getFilteredItems().map((item, index) => (
              <Item
                key={item.system.id}
                {...getItemProps({
                  item,
                  index,
                  isActive: highlightedIndex === index,
                  isSelected: !!selectedItems.find(i => i.system.id === item.system.id),
                })}
              >
                {item.system.name}
              </Item>
            ))}
        </Menu>
      </ComboboxContainer>
    </AppContainer>
  );
}

export default App;
